---
- name: prepare nodes for kubernetes
  hosts: all
  become: true
  gather_facts: false
  tasks:
    # this is to eliminate error messages when the host keys are changing 
    # e.q. regenerating reapply terraform after a destroy
    - name: Clear ssh host keys of the nodes
      shell: ssh-keygen -R {{ ansible_ssh_host }}
      become: false
      delegate_to: localhost

    - name: populate hosts file
      blockinfile:
        path: /etc/hosts
        block: |
          192.168.101.10 master
          192.168.101.11 node1
          192.168.101.12 node2
      tags: [setupaccess]

    - name: Enable passwordless sudo for admin user
      copy:
        dest: /etc/sudoers.d/admin
        content: |
          admin ALL=(ALL) NOPASSWD:ALL
      tags: [setupaccess]

    - name: generate SSH key for inter-node auth
      openssh_keypair:
        path: internode_id_rsa
      become: false
      run_once: true
      delegate_to: localhost
      tags: [setupaccess]

    - name: Put own authorized key to nodes
      authorized_key:
        user: "{{ item }}"
        state: present
        key: "{{ lookup('file', '~/.ssh/id_ed25519.pub') }}"
      loop:
        - admin
        - root
      tags: [setupaccess]

    - name: Put own authorized key to nodes
      authorized_key:
        user: "{{ item }}"
        state: present
        key: "{{ lookup('file', 'internode_id_rsa.pub') }}"
      loop:
        - admin
        - root
      tags: [setupaccess]

    - name: put private key to admin
      copy:
        src: internode_id_rsa
        dest: "~admin/.ssh/id_rsa"
        mode: 0600
      become: false
      tags: [setupaccess]

    - name: put public key to admin
      copy:
        src: internode_id_rsa.pub
        dest: "~admin/.ssh/id_rsa.pub"
        mode: 0600
      become: false
      tags: [setupaccess]

    - name: put private key to root
      copy:
        src: internode_id_rsa
        dest: "~root/.ssh/id_rsa"
        mode: 0600
      tags: [setupaccess]

    - name: put public key to root
      copy:
        src: internode_id_rsa.pub
        dest: "~root/.ssh/id_rsa.pub"
        mode: 0600
      tags: [setupaccess]

    - name: populate known_hosts for admin
      shell: ssh -o StrictHostKeyChecking=false {{ item }} -- true
      loop: "{{ play_hosts }}"
      become: false
      tags: [setupaccess]

    - name: populate known_hosts for root
      shell: ssh -o StrictHostKeyChecking=false {{ item }} -- true
      loop: "{{ play_hosts }}"
      tags: [setupaccess]

    - name: Install prerequisite packages - Debian family edition
      package:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gpg
      tags: [prereq_pkgs]

    ### KERNEL PARAMETERS AND MODULES ARE HANDLED BY TERRAFORM IN ADVANCE
    # lxc/incus system containers use the hosts's kernel along with its 
    # modules and settings, so it has to be handled in terraform

    # We do not force a specific version, just have the laters - maybe we should
    - name: Install containerd
      apt:
        name: containerd
        state: present
      tags: [containerd]

    - name: Mark hold containerd package
      dpkg_selections:
        name: containerd
        selection: hold
      tags: [containerd]

    - name: Create directory for containerd config
      file:
        path: /etc/containerd
        state: directory
      tags: [containerd]

    # We force config changes:
    # SystemdCgroup = true
    # sandbox_image = registry.k8s.io/pause:3.9
    - name: Get containerd default config and edit SystemdCgroup and sandbox_image values
      shell: >
        containerd config default
        | sed 's|SystemdCgroup = false|SystemdCgroup = true|g'
        | sed 's|sandbox_image = "registry.k8s.io/pause:.*"|sandbox_image = "registry.k8s.io/pause:3.9"|'
      register: config
      changed_when: false
      tags: [containerd]

    - name: Write containerd config config
      copy:
        content: "{{ config.stdout }}"
        dest: /etc/containerd/config.toml
      tags: [containerd]

    - name: Restart containerd
      service:
        name: containerd
        state: restarted
      tags: [containerd]

    - name: Get Kubernetes version info
      uri:
        url: https://dl.k8s.io/release/stable.txt
        return_content: true
      register: kube_latest
      tags: [kube]

    # We trim the last part from the version info v1.34.1 -> v1.34
    - name: Process version info into variable
      set_fact:
        kube_version: "{{ (kube_latest.content | split('.'))[:-1] | join('.') }}"
      tags: [kube]

    - name: Get public signing key 
      uri:
        url: https://pkgs.k8s.io/core:/stable:/{{ kube_version}}/deb/Release.key
        return_content: true
      register: kube_signkey
      changed_when: false
      tags: [kube]

    - name: Dearmor signkey
      shell: |
        echo '{{ kube_signkey.content }}' | gpg --dearmor
      register: kube_signkey_dearmored
      changed_when: false
      tags: [kube]

    - name: Create key directory
      file:
        path: /etc/apt/keyrings
        state: directory
      tags: [kube]

    - name: Put dearmored signing key
      copy:
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        content: "{{ kube_signkey_dearmored.stdout }}"
      tags: [kube]

    - name: Add Kubernetes repository
      apt_repository:
        filename: kubernetes
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kube_version }}/deb /"
      tags: [kube]

    - name: Install kubelet, kubeadm, kubectl
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
      tags: [kube]

    - name: Mark hold kubelet, kubeadm, kubectl packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
      tags: [kube]


